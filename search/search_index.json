{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"OpenShift Pipelines Demo This website hosts an OpenShift pipelines demo and is itself built with Pipelines. How this application works This application is a static website built with mkdocs . The code of the demo is hosted on GitHub Project Structure The following image represents the project structure build/ is a folder container the Dockerfile and the needed resourced to build the mkdocs image cd/ this folder contains the tasks, pipeline and pipelinerun manifests definition docs/ contains the Markdown documentations rendered by mkdocs k8s/ contains all the needed manifest to deploy the application on Kubernetes mkdocs.yml the main mkdocs configuration file Makefile a Makefile do locally build the image and start a container for local development purpose","title":"Home"},{"location":"#openshift-pipelines-demo","text":"This website hosts an OpenShift pipelines demo and is itself built with Pipelines.","title":"OpenShift Pipelines Demo"},{"location":"#how-this-application-works","text":"This application is a static website built with mkdocs . The code of the demo is hosted on GitHub","title":"How this application works"},{"location":"#project-structure","text":"The following image represents the project structure build/ is a folder container the Dockerfile and the needed resourced to build the mkdocs image cd/ this folder contains the tasks, pipeline and pipelinerun manifests definition docs/ contains the Markdown documentations rendered by mkdocs k8s/ contains all the needed manifest to deploy the application on Kubernetes mkdocs.yml the main mkdocs configuration file Makefile a Makefile do locally build the image and start a container for local development purpose","title":"Project Structure"},{"location":"automations/","text":"","title":"Automations"},{"location":"deployment/","text":"The application is deployed on Kubernetes via a Deployment manifest located under the k8s/Deployment.yaml . The application is a very simple static website served by an NGINX pod. The static content is built using an MkDocs container triggered by an OpenShift Pipeline. The static content is stored into a persistentVolumeClaim with name html-mkdocs . The pipeline is designed to build the mkdocs container image, build the documentation or deploy the application depending on the value of the action parameter. How to deploy the demo Create the namespace $ oc new-project pipelines-demo fork the repo clone the repo create the html-mkdocs PVC $ cat << EOF | oc create -f - apiVersion: v1 kind: PersistentVolumeClaim metadata: name: html-mkdocs spec: accessModes: - ReadWriteMany resources: requests: storage: 500Mi EOF $ oc create -f cd/pvc.yaml Create the Task resources $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/tasks/build-docs.yaml $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/tasks/apply-manifests.yaml $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/tasks/update-deployment.yaml Create the Pipeline resurce $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/pipeline/pipeline.yaml Create the trigger resources $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/triggers/triggerbinding.yaml $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/triggers/triggertemplate.yaml $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/triggers/trigger.yaml $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/triggers/eventlistner.yaml Confirm that an eventlistner service has been created and expose it $ oc get svc $ oc expose svc el-mkdocs Get the URL route $ echo \"URL: $(oc get route el-mkdocs --template='http://{{.spec.host}}')\" Start building the image: $ cd tests $ ./run.sh build-image Check if the pipeline is started $ tkn pipelinerun list $ tkn pipeline logs -f <pipelinerun-name> Once the pipline terminated successfully you can deploy the application $ cd tests $ ./run.sh deploy","title":"Deployment"},{"location":"deployment/#how-to-deploy-the-demo","text":"Create the namespace $ oc new-project pipelines-demo fork the repo clone the repo create the html-mkdocs PVC $ cat << EOF | oc create -f - apiVersion: v1 kind: PersistentVolumeClaim metadata: name: html-mkdocs spec: accessModes: - ReadWriteMany resources: requests: storage: 500Mi EOF $ oc create -f cd/pvc.yaml Create the Task resources $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/tasks/build-docs.yaml $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/tasks/apply-manifests.yaml $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/tasks/update-deployment.yaml Create the Pipeline resurce $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/pipeline/pipeline.yaml Create the trigger resources $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/triggers/triggerbinding.yaml $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/triggers/triggertemplate.yaml $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/triggers/trigger.yaml $ oc create -f https://raw.githubusercontent.com/pbertera/OpenShift-pipelines-demo/main/cd/triggers/eventlistner.yaml Confirm that an eventlistner service has been created and expose it $ oc get svc $ oc expose svc el-mkdocs Get the URL route $ echo \"URL: $(oc get route el-mkdocs --template='http://{{.spec.host}}')\" Start building the image: $ cd tests $ ./run.sh build-image Check if the pipeline is started $ tkn pipelinerun list $ tkn pipeline logs -f <pipelinerun-name> Once the pipline terminated successfully you can deploy the application $ cd tests $ ./run.sh deploy","title":"How to deploy the demo"},{"location":"pipeline/","text":"","title":"The Pipeline"},{"location":"setup/","text":"Install the OpenShift Pipelines operator The OpenShift Pipelines operator can be installer either via the web console or via the oc cli. To install the OpenShift Pipeline operator please follow the product documentation Please make sure to install: the OpenShift pipelines operator the Tekton CLI","title":"Setup"},{"location":"setup/#install-the-openshift-pipelines-operator","text":"The OpenShift Pipelines operator can be installer either via the web console or via the oc cli. To install the OpenShift Pipeline operator please follow the product documentation Please make sure to install: the OpenShift pipelines operator the Tekton CLI","title":"Install the OpenShift Pipelines operator"}]}